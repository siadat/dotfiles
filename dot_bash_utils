# Bash utils by Sina
# Source this in your ~/.bash_profile
# vim: ft=bash
export HISTFILESIZE=1000000
export HISTSIZE=1000000
export EDITOR=nvim
alias v="${EDITOR} -O"
alias view="${EDITOR} -R -O"
alias date-slug='date +%F-%T'
alias epoch='date +%s'
alias grep='grep --color'
alias abspath='readlink -f'

alias pull='git pull origin HEAD'
alias push='git push origin HEAD'
alias gd='git diff --stat -p -w' # -U0
alias gdc='git diff --stat -p -w --cached' # -U0
alias gsh='git show --stat -p -w' #  -U0
alias gs='git status'
alias git-soft-reset='git reset --soft HEAD~'

alias docker-clean='docker system prune -a'

export PATH=~/src/zig-prebuilt/current:$PATH

function download_and_switch_zig_version () {
	(
		# This function downloads a prebuilt version of zig and switches to it
		# See https://ziglang.org/download/
		# The URL is fetched from https://ziglang.org/download/index.json
		#
		# Usage examples:
		#   download_and_switch_zig_version master
		#   download_and_switch_zig_version 0.12.0

		set -e
		mkdir -p ~/src/zig-prebuilt
		cd ~/src/zig-prebuilt
		VER="${1:-master}" # master 0.12.0 0.11.0
		URL="$(curl -s https://ziglang.org/download/index.json | jq -r '.["'"${VER}"'"]["x86_64-linux"].tarball')"

		# DIR is the name of the extracted directory
		DIR="$(basename "${URL%.tar.xz}")"

		if [ -e "$DIR" ]; then
			echo "Already downloaded ${VER} in $(abspath $DIR)"
		else
			wget -O zig.tar.xz -c "$URL"
			tar xvf zig.tar.xz
			rm zig.tar.xz
			if [ ! -e "$DIR" ]; then
				echo "Expected to find $DIR after extracting $URL but it was not found"
				exit 1
			fi
		fi
		rm current
		ln -s "$DIR" current
		ls -lash .
	)
}

# open results of rg in EDITOR
function vrg() {
	$EDITOR -O $(rg -l "$@")
}

function capture () {
	(
		local out;
		out="$(mktemp --tmpdir=. --suffix=.txt)";
		tmux capture-pane -J -S- -b mybuf;
		tmux save-buffer -b mybuf "${out}";
		echo "${out}";
		nvim "${out}"
	)
}

function dotfiles {
	(
		while getopts "d" opt; do
		  case $opt in
		    d)
		      DEV=true
		      ;;
		    \?)
		      echo "Valid options:"
		      echo "  -n Do not push changes to remote"
		      exit 1
		      ;;
		  esac
		done

		if [ ! -n "$DEV" ]; then
			echo "chezmoi update" && chezmoi update
		fi

		echo "chezmoi apply" && chezmoi apply
		cd ~/.local/share/chezmoi/
		git add -u
		git status

		if [ -n "$DEV" ]; then
			echo "Changes not pushed to remote"
			return
		fi


		tempfile=$(mktemp --suffix .patch)
		# have an editor that opens cached diff in a vertical split
		EDITOR='nvim -O +"vs '$tempfile'" +"r!git diff --stat --cached -p" +"set nomodified" +"normal gg" +"wincmd h"'
		if git commit --edit -m 'update' -a; then
			git push origin HEAD
		        git push origin HEAD
		fi
	)
}

function build_zig_from_source() {
	(
		set -ex

		# dependencies
		brew list llvm || brew install llvm
		brew list zstd || brew install zstd
		dpkg -s libtinfo-dev || sudo apt install libtinfo-dev

		# build
		zig_clone_path=~/src/zig
		if [ ! -d $zig_clone_path ]; then
			git clone git@github.com:ziglang/zig.git $zig_clone_path
		fi

		echo "Delete ${zig_clone_path}/build?"
		read -p "Press enter to continue"

		rm -rf $zig_clone_path/build
		mkdir -p $zig_clone_path/build
		cd $zig_clone_path/build
		time cmake .. -DCMAKE_PREFIX_PATH="$(brew --prefix llvm);$(brew --prefix zstd)"
		make install

		# test
		LD_LIBRARY_PATH=/home/linuxbrew/.linuxbrew/lib/ ~/src/zig/build/stage3/bin/zig --help > /dev/null
		echo $?
	)
}

function build_neovim() {
	(
		set -ex

		cd ~/src/neovim/
		# rm -rf build

		# Without zig:
		# set -e
		# make CMAKE_BUILD_TYPE=RelWithDebInfo
		# make CMAKE_INSTALL_PREFIX=~/src/neovim/sina-build install
		# ~/src/neovim/sina-build/bin/nvim /home/sina/src/advent-of-code-2023-zig/day1/test.lua +"luafile /home/sina/src/advent-of-code-2023-zig/day1/test.lua"

		# with zig:
		cat <<-EOF > /tmp/zig-shim
		#!/bin/bash
		set -ex
		# I got these flags by looking at the output of 'zig build-exe some_simple_program.c --library c --verbose-cc'
		zig clang -isystem ~/src/zig/lib/include -isystem /usr/include -isystem /usr/include/x86_64-linux-gnu "\${@}"
		EOF

		make CC='/tmp/zig-shim' CMAKE_BUILD_TYPE=RelWithDebInfo
		make CMAKE_INSTALL_PREFIX=~/src/neovim/sina-build install
		echo "NeoVim is available as ~/src/neovim/sina-build/bin/nvim"
		# ~/src/neovim/sina-build/bin/nvim /home/sina/src/neovim/test-files/test.lua +"luafile /home/sina/src/neovim/test-files/test.lua"
		# ~/src/neovim/sina-build/bin/nvim --clean /home/sina/src/neovim/test-files/second-bug.lua +"luafile /home/sina/src/neovim/test-files/second-bug.lua"
	)
}

function monitor-tcp-port () {
	(
		local port="$1"
		sudo tshark -i lo -Y "tcp.port == ${port}" -T fields -d tcp.port==${port},echo \
		    -e frame.time \
		    -e ip.src \
		    -e tcp.srcport \
		    -e ip.dst \
		    -e tcp.dstport \
		    -e tcp.len \
		    -e tcp.seq \
		    -e tcp.stream \
		    -e echo.data
		    # -e tcp.flags \
		    # -e tcp.ack \
	)
}

function public-file-server () {
	cd ~/public && timeout 1h python3 -m http.server
}

# print one byte (and its ascii representation) per line
function hexdump-byte-by-byte () {
	hexdump -v -e '1/1 "0x%02x "' -e '1/1 "%_p\n"' "$@"
	# Suggestion: you could feed the output to `column` to see more of the output in one screen at one glance
}

function create_new_user_debian() {
	(
		username=$1
		useradd --create-home $username
		usermod -aG sudo $username
		passwd $username
	)
}

function commit() {
	(
		tempfile=$(mktemp --suffix .patch)
		# have an editor that opens cached diff in a vertical split
		EDITOR='nvim -O +"vs '$tempfile'" +"r!git diff --stat --cached -p" +"set nomodified" +"normal gg" +"wincmd h"'
		git commit -a
	)
}
