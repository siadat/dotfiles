let mapleader=';'
let maplocalleader=';'

call plug#begin('~/.vim/plugged')

Plug 'klen/nvim-test'

Plug 'tpope/vim-obsession'
Plug 'tpope/vim-fugitive'
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'
Plug 'mfussenegger/nvim-lint'
Plug 'ruanyl/vim-gh-line'
Plug 'github/copilot.vim'
" Plug 'edwinb/idris2-vim'

" Plug 'neoclide/coc.nvim', {'branch': 'release'}
" See: https://www.youtube.com/watch?v=8q_VPqA-KLs (Setting up Neovim for Java Development)
" See: https://github.com/josa42/coc-go
" CocInstall coc-java
" CocInstall coc-go
" CocInstall coc-rls " rust (language server)
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gr <Plug>(coc-references)
" nmap <silent> gD <Plug>(coc-type-definition)
" autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')

" " THIS: go install golang.org/x/tools/cmd/goimports@latest
""""Plug 'dense-analysis/ale'
""""let g:ale_fix_on_save = 1
""""" \ 'go': ['gopls'],
""""let g:ale_linters = {
""""  \ 'json': ['jq'],
""""  \ 'sh': ['shellcheck'],
""""  \}
""""" \ 'zig': ['zls'],
""""" \ 'go': ['goimports'],
""""let b:ale_fixers = {
""""  \ 'typescriptreact': ['prettier'],
""""  \} " Install prettier locally with 'npm install -D prettier'
""""nmap <silent> <leader>j <Plug>(ale_next_wrap)
""""nmap <silent> <leader>k <Plug>(ale_previous_wrap)
""""nmap <silent> gd <Plug>(ale_go_to_definition)
""""nmap <silent> gD <Plug>(ale_go_to_type_definition)

Plug 'fatih/vim-go'
let g:go_bin_path = "/tmp"
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
let g:go_rename_command = 'gopls'

if has('nvim')
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'rlane/pounce.nvim'
  " Plug 'nvim-lua/plenary.nvim'
  " Plug 'sindrets/diffview.nvim'
  nmap <leader>f <cmd>Pounce<Cr>
else
  """" " Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
  """" " Plug 'fatih/vim-go', { 'tag': '*' }
  """" let g:go_bin_path = "/tmp"
  """" let g:go_def_mode='gopls'
  """" let g:go_info_mode='gopls'
  """" let g:go_rename_command = 'gopls'

  """" nmap <leader>t :GoTestFunc<cr>
  """" nmap <leader>T :GoCoverageBrowser<cr>
  """" 
  """" let g:go_fmt_command = "goimports"
  """" Plug 'fatih/molokai'
  """" Plug 'duckwork/low.vim'
  """" let g:go_highlight_functions = 0
  """" let g:go_highlight_methods = 0
  """" let g:go_highlight_fields = 0
  """" let g:go_highlight_types = 0
  """" let g:go_highlight_operators = 0
endif

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'}
Plug 'junegunn/fzf.vim'
" Disable preview
" let g:fzf_preview_window = ['right:hidden', 'ctrl-/']

" Plug 'ctrlpvim/ctrlp.vim'
if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
else
  let g:ctrlp_clear_cache_on_exit = 0
endif


Plug 'neovimhaskell/haskell-vim'
Plug 'numToStr/Comment.nvim'
" Plug 'RRethy/vim-illuminate'

call plug#end()

lua require('Comment').setup()

nnoremap <c-p> :GFiles<cr>
" nmap <leader>t :let $VIM_DIR=expand('%:p:h')<cr>:terminal<cr>icd $VIM_DIR<cr>i

syntax on
" set background=light
set mouse= " disable mouse
set modeline
set incsearch
set hlsearch
set nowrap
set tabstop=4
set shiftwidth=2
set expandtab
set novisualbell
set smartindent
set nowrapscan
set ruler
set title
set showcmd
set splitright
set splitbelow
set fileencoding=utf-8
set foldmethod=marker
set foldlevel=0
set foldcolumn=0
set fdo=block,hor,mark,percent,quickfix,search,tag,undo,search
set fml=2
set fen
set laststatus=2
set sidescroll=5
set ignorecase
set smartcase
set noic
set t_Co=256
set complete=.,w,b,u,t,i,d,U
set diffopt=filler,iwhite
set wildmenu

set relativenumber
set number

silent !mkdir -p ~/.vim/backup
silent !mkdir -p ~/.vim/swp
set backupdir=~/.vim/backup//
set directory=~/.vim/swp//

nnoremap <c-q> <c-w>
nmap <leader>w :up<cr>
nmap <leader>q :q<cr>
nmap <leader>/ /<up>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" nnoremap <s-c-j> <c-w>+
" nnoremap <s-c-k> <c-w>-
" nnoremap <s-c-h> <c-w><lt>

nnoremap U <c-r>

nnoremap <c-w>w <c-w>=
nnoremap <c-w>e <c-w>\|<c-w>_

nnoremap p "0p
vnoremap p "0p
nnoremap P "0P
vnoremap P "0P

vnoremap d "0d
nnoremap d "0d
vnoremap D "0D
nnoremap D "0D

" go back to previous file
nnoremap <leader><c-o> <c-^>

if has('nvim')
  nnoremap <leader>v :e ~/.config/nvim/init.vim<cr>
  nnoremap <leader>V :e ~/.vimrc<cr>
else
  nnoremap <leader>v :e ~/.vimrc<cr>
endif

" CopyDefaultRegisterToLongterm copies the default unnamed register (@) to the
" 'L' register (@L).
function! CopyDefaultRegisterToLongterm(...)
  " @ is the default register
  " @L is what we use as the long term register
  let @L = @
endfunction
nnoremap Y :call CopyDefaultRegisterToLongterm()<cr>
nnoremap <leader>p :normal "Lp<cr>
nnoremap <leader>P :normal "LP<cr>

function! RegisterLastChangedLine(...)
  let @l = getline("'.")
endfunction
nnoremap <leader>l :call RegisterLastChangedLine() \| normal "lp<cr>
nnoremap <leader>L :call RegisterLastChangedLine() \| normal "lP<cr>

function! CopyFilenameToClipboard()
  silent !tmux set-buffer %
  redraw!
endfunction
nnoremap <leader>g :call CopyFilenameToClipboard()<cr>

function! Seq(...)
  " Examples:
  "   :call Seq(0, 99)
  "   :call Seq('00', '99')
  let cmd = "echo {" . a:1 . ".." . a:2 . "} | perl -pe 's/ /\\n/g'"
  exe "r!" . cmd
endfunction

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

let g:go_highlight_build_constraints = 1
colorscheme slate " molokai morning pencil base16-grayscale-light base16-grayscale-light low molokai morning molokai  morning
set signcolumn=no

" hi CursorLine term=bold cterm=bold guibg=Grey40
" hi CursorLine   cterm=NONE ctermbg=Black ctermfg=white guibg=darkred guifg=white
hi CursorLine   cterm=NONE ctermbg=Black guibg=darkred guifg=white
" nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>
"
" autocmd FileType markdown set colorcolumn=60
autocmd BufRead,BufNewFile *.md set colorcolumn=60
" autocmd BufRead,BufNewFile *.md set textwidth=60
" set cursorline
"
" highlight Cursor guifg=black guibg=white

" au BufEnter,BufNew *.newshell set ft=go

nnoremap <F1> <S-F1> " dummy mapping to unmap <F1>, which I use for switching scenes in OBS.
nnoremap <leader>r :tabnew \| term bash -c ''<left>
" nnoremap <leader>t :bo sp \| term!<cr>
nnoremap gf :bo sp<cr>gF

" inoremap <tab> <esc>
" vnoremap <tab> <esc>
" cnoremap <tab> <esc>
nnoremap <C-f> <ESC>
inoremap <C-f> <ESC>
vnoremap <C-f> <ESC>
cnoremap <C-f> <ESC>
tnoremap <C-f> <C-\><C-n>
snoremap <C-f> <ESC>

" Get out of a block, to the beginning or the end
nnoremap <leader><space>( va(%<esc>
nnoremap <leader><space>) va(<esc>
nnoremap <leader><space>[ va[%<esc>
nnoremap <leader><space>] va]<esc>
nnoremap <leader><space>{ va{%<esc>
nnoremap <leader><space>} va}<esc>

" close terminal right after process has exited:
" autocmd TermClose * execute 'bdelete! ' . expand('<abuf>')


" Hide oauth tokens in IRSSI config file
autocmd BufRead,BufNewFile config syn match MyPassword /\(['"]\)oauth:.*\1/ conceal cchar=*
autocmd BufRead,BufNewFile config setl conceallevel=2 concealcursor=nv


autocmd BufRead,BufNewFile *.py setl makeprg=./vim-pytest-filter
" autocmd BufRead,BufNewFile *.py setl errorformat=%f:%l
set errorformat=%f:%l:\ %m
